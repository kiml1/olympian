group_by(manufacturer, model) %>%
summarise(max(cty))
data(mpg)
force(mpg)
View(mpg)
mpg %>%
group_by(manufacturer) %>%
summarise(max(cty))
mpg %>%
group_by(manufacturer, model) %>%
summarise(max(cty))
mpg %>%
group_by(manufacturer, model) %>%
summarise(max(cty)) %>%
filter(manufacturer= "audi")
mpg %>%
group_by(manufacturer, model) %>%
summarise(max(cty)) %>%
filter(manufacturer== "audi")
mpg %>%
group_by(manufacturer, model) %>%
summarise(max(cty))
class(mpg %>%
group_by(manufacturer, model) %>%
summarise(max(cty)))
mpg %>%
group_by(manufacturer, model) %>%
summarise(max(cty)) %>%
group_by(manufacturer) %>%
filter(manufacturer =="audi")
mpg %>%
group_by(manufacturer, model) %>%
summarise(max(cty)) %>%
group_by(manufacturer) %>%
filter()
mpg %>%
group_by(manufacturer, model) %>%
summarise(max(cty)) %>%
group_by(manufacturer) %>%
filter(max(cty))
mpg %>%
group_by(manufacturer, model) %>%
summarise(max(cty)) %>%
group_by(manufacturer) %>%
filter(max(cty))
mpg %>%
group_by(manufacturer, model) %>%
summarise(max(cty)) %>%
group_by(manufacturer)
mpg %>%
group_by(manufacturer, model) %>%
summarise(try = max(cty)) %>%
group_by(manufacturer)
mpg %>%
group_by(manufacturer, model) %>%
summarise(maxCTY = max(cty)) %>%
group_by(manufacturer)
mpg %>%
group_by(manufacturer, model) %>%
summarise(maxCTY = max(cty)) %>%
group_by(manufacturer)%>%
filter(maxCTY > max(maxCTY))
mpg %>%
group_by(manufacturer, model) %>%
summarise(maxCTY = max(cty)) %>%
group_by(manufacturer)
mpg %>%
group_by(manufacturer, model) %>%
summarise(maxCTY = max(cty)) %>%
group_by(manufacturer)%>%
filter(max(maxCTY))
mpg %>%
group_by(manufacturer, model) %>%
summarise(maxCTY = max(cty)) %>%
mpg %>%
group_by(manufacturer, model) %>%
summarise(maxCTY = max(cty))
data(mpg)
mpg %>%
group_by(manufacturer, model) %>%
summarise(maxCTY = max(cty))
mpg %>%
group_by(manufacturer, model) %>%
summarise_all(maxCTY = max(cty))
mpg %>%
group_by(manufacturer, model) %>%
summarise(maxCTY = max(cty))
mpg %>%
group_by(manufacturer) %>%
summarise(maxCTY = max(cty))
mpg %>%
group_by(manufacturer) %>%
summarise_all(maxCTY = max(cty))
mpg %>%
group_by(manufacturer, model) %>%
summarise(maxCTY = max(cty))
mpg %>%
group_by(manufacturer, model) %>%
summarise(maxCTY = max(cty))
install.packages('tidyverse')
install.packages("shiny")
shiny::runApp('Desktop/NYCDSA/Module 4 - Data Analysis with R/Intro to Shiny/shinyDemo')
getwd()
dt <- mtcars[,c("wt","mpg")]
dt
mtcars
View(mtcars)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(dplyr)
library(lubridate)
knitr::opts_chunk$set(echo = TRUE)
path = "https://nycdsastudent.s3.us-east-2.amazonaws.com/MidtermRDA/df_tot.RDS"
download.file(path,"./bail_out/df_tot.RDS", method="curl")
df_tot <- readRDS( "./bail_out/df_tot.RDS" )
clean_text_col <- function(listOfStrings) {
returnList <- list()
for (i in 1:length(listOfStrings)) {
returnList[[i]] = gsub("[^[:alpha:][:space:]]","",listOfStrings[[i]])
returnList[[i]] = gsub("  ","",returnList[[i]])
returnList[[i]] = gsub("^\\s+|\\s+$", "", returnList[[i]])
returnList[[i]] = toupper(returnList[[i]])
}
return(returnList)
}
listOFFICEandPURPOSE <- list(df_tot$OFFICE, df_tot$PURPOSE)
##run function to clean
listOFFICEandPURPOSEclean <- clean_text_col(listOFFICEandPURPOSE)
View(listOFFICEandPURPOSEclean)
head(listOFFICEandPURPOSEclean[[2]])
?head
head(listOFFICEandPURPOSEclean[[2]],n=10)
head(listOFFICEandPURPOSEclean[[2]],n=20)
df_tot_clean <- df_tot %>% mutate(OFFICE.CLEAN = listOFFICEandPURPOSEclean[[1]]) %>% mutate(PURPOSE.CLEAN = listOFFICEandPURPOSEclean[[2]])
View(df_tot_clean)
View(df_tot_clean)
df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE, PURPOSE) %>% summarise(sum(AMOUNT))
View(df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE, PURPOSE) %>% summarise(sum(AMOUNT)))
View(df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise(sum(AMOUNT)))
df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(desc("Total expending"))
View(df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)))
View(df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(desc("Total expending")))
VIew(df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) )
View(df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)))
df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(OFFICE.CLEAN)
df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(`Total expending`)
df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(desc(`Total expending`))
View(df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(desc(`Total expending`)))
(df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)))[1,1]
df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT))
View(df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(desc(`Total expending`)))
df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(desc(`Total expending`))[1,1]
(df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(desc(`Total expending`)))[1,1]
(df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(desc(`Total expending`)))[1,2]
## to check the office and purpose highest total expenditures by descending order:
df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(desc(`Total expending`))
OFFICE.NAME <- (df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(desc(`Total expending`)))[1,1]
PURPOSE.NAME <- (df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(desc(`Total expending`)))[1,2]
print(OFFICE.NAME)
print(PURPOSE.NAME)
echo(OFFICE.NAME)
cat(OFFICE.NAME)
print(OFFICE.NAME)
OFFICE.NAME
df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(desc(`Total expending`)) %>% ungroup()
(df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(desc(`Total expending`)) %>% ungroup())[1,1]
(df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(desc(`Total expending`)) %>% ungroup())[[1]]
(df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(desc(`Total expending`)) %>% ungroup())[[1]][1]
(df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(desc(`Total expending`)) %>% ungroup())[[2]][1]
OFFICE.NAME <- (df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(desc(`Total expending`)))[[1]][1]
PURPOSE.NAME <- (df_tot_clean %>% filter(START.DATE >= "2016-01-01") %>% group_by(OFFICE.CLEAN, PURPOSE.CLEAN) %>% summarise("Total expending" = sum(AMOUNT)) %>% arrange(desc(`Total expending`)))[[2]][1]
print(OFFICE.NAME)
print(PURPOSE.NAME)
avgAnnualExpenditure <- df_tot %>% filter(START.DATE > "2010-01-01" & START.DATE <= "2016-12-31") %>% filter(AMOUNT > 0) %>% mutate(YEAR = year(START.DATE)) %>% group_by(YEAR) %>% summarise("Average Expenditure" = mean(AMOUNT))
avgAnnualExpenditure <- df_tot %>% filter(START.DATE > "2010-01-01" & START.DATE <= "2016-12-31") %>% filter(AMOUNT > 0) %>% mutate(YEAR = year(START.DATE)) %>% group_by(YEAR) %>% summarise("Average Expenditure" = mean(AMOUNT))
print(avgAnnualExpenditure)
install.packages("shinydashboard")
devtools::install_github('rstudio/DT')
devtools::install_github('rstudio/DT')
install.packages("devtools")
devtools::install_github('rstudio/DT')
install.packages("rsconnect")
shiny::runApp('Desktop/olympian')
runApp('Desktop/olympian')
runApp('Desktop/olympian')
shiny::runApp('Desktop/tse')
install.packages(rsconnect)
library(rsconnect)
rsconnect::setAccountInfo(name='kiml1', token='3623B2F05B40502F06FA7CF6792CEC25', secret='PAY8ftdY6Nh/CZhfaBv6GH0g6zhSrJO7Z+931NNT')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
plot(    ggplot(plot2_2_1, aes(x = ratio, y = region)) +
geom_point(na.rm = FALSE) +
xlim(0, 1))
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
View(plot1_1)
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
runApp('Desktop/tse')
shiny::runApp('Desktop/olympian')
runApp('Desktop/olympian')
View(gii.df)
runApp('Desktop/olympian')
plot2_2$region[plot2_2$region == "Korea (Republic of)	"] <- "South Korea"
runApp('Desktop/olympian')
View(plot2_2)
plot2_2$region[plot2_2$region == "Korea (Republic of)"] <- "South Korea"
View(plot2_2)
View(plot2_2)
#fix a lot of name typos
plot2_2$region[plot2_2$region == "Korea (Republic of)"] <- "South Korea"
plot2_2$region[plot2_2$region == "Bolivia (Plurinational State of)"] <- "Bolivia"
plot2_2$region[plot2_2$region == "Venezuela (Bolivarian Republic of)"] <- "Venezuela"
plot2_2$region[plot2_2$region == "Russian Federation"] <- "Russia"
runApp('Desktop/olympian')
View(plot2_1)
View(plot2_1)
#(plot2_3) compare gender equality index with ratio of women athletes
plot2_3 <- athlete_regions.df %>% mutate(Year = ifelse(Year == 1994, 1996,
ifelse(Year == 1998, 2000,
ifelse(Year == 2002, 2004,
ifelse(Year == 2006, 2008,
ifelse(Year == 2010, 2012,
ifelse(Year == 2014, 2016, Year))))))) %>%
group_by(Year, region, Sex) %>% summarise("Number Athletes" = length(unique(ID)))
plot2_3 <- dcast(setDT(plot2_3), Year + region ~ Sex, fun.aggregate = sum, value.var = "Number Athletes") %>%
mutate(ratio = F/(F+M)) %>% filter(Year == 2016)
level2_3 <- plot2_3 %>% arrange(ratio) %>% select(region)
plot2_3$region <- factor(plot2_3$region, levels = c(level2_3$region))
View(plot2_3)
View(plot2_3)
View(gii.df)
#(plot2_3) compare gender equality index with ratio of women athletes
plot2_3 <- athlete_regions.df %>% mutate(Year = ifelse(Year == 1994, 1996,
ifelse(Year == 1998, 2000,
ifelse(Year == 2002, 2004,
ifelse(Year == 2006, 2008,
ifelse(Year == 2010, 2012,
ifelse(Year == 2014, 2016, Year))))))) %>%
group_by(Year, region, Sex) %>% summarise("Number Athletes" = length(unique(ID)))
plot2_3 <- dcast(setDT(plot2_3), Year + region ~ Sex, fun.aggregate = sum, value.var = "Number Athletes") %>%
mutate(ratio = F/(F+M)) %>% filter(Year == 2016) %>% select()
plot2_3 <- dcast(setDT(plot2_3), Year + region ~ Sex, fun.aggregate = sum, value.var = "Number Athletes") %>%
mutate(ratio = F/(F+M)) %>% filter(Year == 2016)
#(plot2_3) compare gender equality index with ratio of women athletes
plot2_3 <- athlete_regions.df %>% mutate(Year = ifelse(Year == 1994, 1996,
ifelse(Year == 1998, 2000,
ifelse(Year == 2002, 2004,
ifelse(Year == 2006, 2008,
ifelse(Year == 2010, 2012,
ifelse(Year == 2014, 2016, Year))))))) %>%
group_by(Year, region, Sex) %>% summarise("Number Athletes" = length(unique(ID)))
plot2_3 <- dcast(setDT(plot2_3), Year + region ~ Sex, fun.aggregate = sum, value.var = "Number Athletes") %>%
mutate(ratio = F/(F+M)) %>% filter(Year == 2016)
View(plot2_3)
plot2_3 <- dcast(setDT(plot2_3), Year + region ~ Sex, fun.aggregate = sum, value.var = "Number Athletes") %>%
mutate(ratio = F/(F+M)) %>% filter(Year == 2016) %>% select(region, ratio)
level2_3 <- plot2_3 %>% arrange(ratio) %>% select(region)
plot2_3$region <- factor(plot2_3$region, levels = c(level2_3$region))
#(plot2_3) compare gender equality index with ratio of women athletes
plot2_3 <- athlete_regions.df %>% mutate(Year = ifelse(Year == 1994, 1996,
ifelse(Year == 1998, 2000,
ifelse(Year == 2002, 2004,
ifelse(Year == 2006, 2008,
ifelse(Year == 2010, 2012,
ifelse(Year == 2014, 2016, Year))))))) %>%
group_by(Year, region, Sex) %>% summarise("Number Athletes" = length(unique(ID)))
plot2_3 <- dcast(setDT(plot2_3), Year + region ~ Sex, fun.aggregate = sum, value.var = "Number Athletes") %>%
mutate(ratio = F/(F+M)) %>% filter(Year == 2016) %>% select(region, ratio)
level2_3 <- plot2_3 %>% arrange(ratio) %>% select(region)
plot2_3$region <- factor(plot2_3$region, levels = c(level2_3$region))
plot2_3 <- inner_join(plot2_3, gii.df %>% select(region, GII=X2016), by="region")
View(plot2_3)
runApp('Desktop/olympian')
plot(   ggplot(mpg, aes(ratio, GII)) +
geom_jitter(width = .5, size=1))
View(plot2_3)
plot(   ggplot(mpg, aes(ratio, GII)) +
geom_jitter(width = .5, size=1))
plot(  ggplot(plot2_3, aes(ratio, GII)) +
geom_jitter(width = .5, size=1))
class(plot2_3$GII)
plot2_3 <- inner_join(plot2_3, gii.df %>% select(region, GII=X2016) %>% as.numeric(.$GII), by="region")
gii.df %>% filter(GII != "..") %>% as.numeric(.,GII)
gii.df %>% filter(GII != "..")
gii.df %>% filter(X2016 != "..") %>% as.numeric(.,X2016)
View(gii.df)
gii.df %>% filter(X2016 != "..")
gii2016 %>% gii.df %>% filter(X2016 != "..")
gii2016 <- gii.df %>% filter(X2016 != "..")
View(gii2016)
gii2016 <- gii.df %>% filter(X2016 != "..") %>% as.numeric(.,X2016)
gii2016 <- gii.df %>% filter(X2016 != "..") %>% as.numeric(., gii2016$X2016)
?as.numeric
gii2016 <- gii.df %>% filter(X2016 != "..") %>% as.numeric(X2016)
gii2016 <- gii.df %>% filter(X2016 != "..") %>% as.numeric(gii2016$X2016)
gii2016[178,1]
gii2016[178,2]
gii2016 <- gii.df %>% filter(X2016 != "..", X2016 != "") %>% as.numeric(gii2016$X2016)
gii2016 <- gii.df %>% filter(X2016 != "..", X2016 != "")
gii2016 <- gii.df %>% filter(X2016 != "..", X2016 != "") %>% select(region, X2016)
as.numeric(gii2016$X2016)
gii2016$X2016 <- as.numeric(gii2016$X2016)
plot2_3 <- inner_join(plot2_3, gii.df %>% select(region, GII=X2016), by="region")
View(plot2_3)
#(plot2_3) compare gender equality index with ratio of women athletes
plot2_3 <- athlete_regions.df %>% mutate(Year = ifelse(Year == 1994, 1996,
ifelse(Year == 1998, 2000,
ifelse(Year == 2002, 2004,
ifelse(Year == 2006, 2008,
ifelse(Year == 2010, 2012,
ifelse(Year == 2014, 2016, Year))))))) %>%
group_by(Year, region, Sex) %>% summarise("Number Athletes" = length(unique(ID)))
plot2_3 <- dcast(setDT(plot2_3), Year + region ~ Sex, fun.aggregate = sum, value.var = "Number Athletes") %>%
mutate(ratio = F/(F+M)) %>% filter(Year == 2016) %>% select(region, ratio)
level2_3 <- plot2_3 %>% arrange(ratio) %>% select(region)
plot2_3$region <- factor(plot2_3$region, levels = c(level2_3$region))
gii2016 <- gii.df %>% filter(X2016 != "..", X2016 != "") %>% select(region, X2016)
gii2016$X2016 <- as.numeric(gii2016$X2016)
plot2_3 <- inner_join(plot2_3, gii2016 %>% select(region, GII=X2016), by="region")
View(plot2_3)
runApp('Desktop/olympian')
plot(  ggplot(plot2_3, aes(ratio, GII)) +
geom_jitter(width = .5, size=1))
plot(    ggplot(plot2_3, aes(ratio, GII)) +
geom_point())
runApp('Desktop/olympian')
class(plot2_3)
View(plot2_3)
View(plot2_3$ratio)
class(plot2_3$ratio)
class(plot2_3$GII)
plot2_3 <- plot2_3 %>% select(ratio,GII)
runApp('Desktop/olympian')
shiny::runApp('Desktop/olympian')
#(plot3_5) age of athletes
plot3_5 <- athlete_regions.df %>% mutate(Year = ifelse(Year == 1994, 1996,
ifelse(Year == 1998, 2000,
ifelse(Year == 2002, 2004,
ifelse(Year == 2006, 2008,
ifelse(Year == 2010, 2012,
ifelse(Year == 2014, 2016, Year))))))) %>%
filter(!is.na(Age)) %>% group_by(Sex, Year) %>% summarise("Average Age" = mean(Age))
runApp('Desktop/olympian')
runApp('Desktop/olympian')
runApp()
runApp('Desktop/olympian')
runApp('Desktop/olympian')
runApp('Desktop/olympian')
runApp('Desktop/olympian')
runApp('Desktop/olympian')
gvisGeoChart(plot1_1, locationvar="region", colorvar="Total Medals",
options=list(width=800, height=600, colorAxis: "{colors: ['bronze', 'gold']}"))
gvisGeoChart(plot1_1, locationvar="region", colorvar="Total Medals",
options=list(width=800, height=600, colorAxis="{colors:['red', 'grey']}"))
plot(    gvisGeoChart(plot1_1, locationvar="region", colorvar="Total Medals",
options=list(width=800, height=600, colorAxis="{colors:['red', 'grey']}")))
plot(    gvisGeoChart(plot1_1, locationvar="region", colorvar="Total Medals",
options=list(width=800, height=600, colorAxis="{colors:['bronze', 'gold']}")))
plot(    gvisGeoChart(plot1_1, locationvar="region", colorvar="Total Medals",
options=list(width=800, height=600, colorAxis="{colors:['A77044', 'D6AF36']}")))
plot(    gvisGeoChart(plot1_1, locationvar="region", colorvar="Total Medals",
options=list(width=800, height=600, colorAxis="{colors:['white', '#F4C300']}")))
runApp('Desktop/olympian')
View(gdp.df)
View(gdp.df %>% select(Country.Name, X2016) %>% arrange(desc(X2016)))
runApp('Desktop/olympian')
plot(    gvisBubbleChart(plot1_2, idvar = "Country.Name", xvar = "Medals", yvar = "GDPbillions",
colorvar="GDPbillions", sizevar = "GDPbillions",
options=list(width=800, height=600,
title="GDP x Medal Count",
hAxis="{title:'Total Medal Count'}",
vAxis="{title:'GDP'}",
colorAxis="{colors:['black']}")))
plot(    gvisBubbleChart(plot1_2, idvar = "Country.Name", xvar = "Medals", yvar = "GDPbillions",
colorvar="GDPbillions", sizevar = "GDPbillions",
options=list(width=800, height=600,
title="GDP x Medal Count",
hAxis="{title:'Total Medal Count'}",
vAxis="{title:'GDP'}",
colorAxis="{colors:['black']}",
options=list(gvis.editor="EDIT"))))
plot(    gvisBubbleChart(plot1_2, idvar = "Country.Name", xvar = "Medals", yvar = "GDPbillions",
colorvar="GDPbillions", sizevar = "GDPbillions",
options=list(width=800, height=600,
title="GDP x Medal Count",
hAxis="{title:'Total Medal Count'}",
vAxis="{title:'GDP'}",
colorAxis="{colors:['black','white']}",
options=list(gvis.editor="EDIT"))))
plot(    gvisBubbleChart(plot1_2, idvar = "Country.Name", xvar = "Medals", yvar = "GDPbillions",
colorvar="GDPbillions", sizevar = "GDPbillions",
options=list(width=800, height=600,
title="GDP x Medal Count",
hAxis="{title:'Total Medal Count'}",
vAxis="{title:'GDP'}",
colorAxis="{colors:['black']}",
gvis.editor="EDIT")))
View(plot1_2)
runApp('Desktop/olympian')
runApp('Desktop/olympian')
runApp('Desktop/olympian')
runApp('Desktop/olympian')
runApp('Desktop/olympian')
a="Lol"
paste0("ALO",a)
paste0("ALO",a, "OP")
paste0("'ALO'",a, "OP")
paste0(""ALO",a, "OP")
paste0(""ALO"",a, "OP")
paste0("'{title:'",a,"'}'")
paste0("'{title:"",a,""}'")
runApp('Desktop/olympian')
plot(    gvisBubbleChart(plot1_3, idvar = "Country.Name", xvar = "Medals", yvar = input$indices,
colorvar=input$indices, sizevar = input$indices,
options=list(width=800, height=600,
hAxis="{title:'Total Medal Count'}",
#vAxis=paste0("'{title:"",a,""}'"),
colorAxis="{legends:{position:'bottom'}, colors:['black']}")))
plot(    gvisBubbleChart(plot1_3, idvar = "Country.Name", xvar = "Medals", yvar = input$indices,
colorvar=input$indices, sizevar = input$indices,
options=list(width=800, height=600,
hAxis="{title:'Total Medal Count'}",
#vAxis=paste0("'{title:"",a,""}'"),
colorAxis="{legend:{position:'bottom'}, colors:['black']}")))
plot(    gvisBubbleChart(plot1_3, idvar = "Country.Name", xvar = "Medals", yvar = input$indices,
colorvar=input$indices, sizevar = input$indices,
options=list(width=800, height=600,
hAxis="{title:'Total Medal Count'}",
colorAxis="{colors:['black']}")))
gvisBubbleChart(plot1_2, idvar = "Country.Name", xvar = "Medals", yvar = "GDPbillions",
colorvar="GDPbillions", sizevar = "GDPbillions",
options=list(width=800, height=600,
title="GDP x Medal Count",
hAxis="{title:'Total Medal Count'}",
vAxis="{title:'GDP'}",
colorAxis="{colors:['black']}"))
plot(    gvisBubbleChart(plot1_2, idvar = "Country.Name", xvar = "Medals", yvar = "GDPbillions",
colorvar="GDPbillions", sizevar = "GDPbillions",
options=list(width=800, height=600,
title="GDP x Medal Count",
hAxis="{title:'Total Medal Count'}",
vAxis="{title:'GDP'}",
colorAxis="{colors:['black']}")))
plot(    gvisBubbleChart(plot1_2, idvar = "Country.Name", xvar = "Medals", yvar = "GDPbillions",
colorvar="GDPbillions", sizevar = "GDPbillions",
options=list(width=800, height=600,
title="GDP x Medal Count",
hAxis="{title:'Total Medal Count'}",
vAxis="{title:'GDP'}",
colorAxis="{legend:{position:'bottom'},colors:['black']}")))
plot(    gvisBubbleChart(plot1_2, idvar = "Country.Name", xvar = "Medals", yvar = "GDPbillions",
colorvar="GDPbillions", sizevar = "GDPbillions",
options=list(width=800, height=600,
title="GDP x Medal Count",
hAxis="{title:'Total Medal Count'}",
vAxis="{title:'GDP'}",
colorAxis="{legend:{position:'in'},colors:['black']}")))
plot(    gvisBubbleChart(plot1_2, idvar = "Country.Name", xvar = "Medals", yvar = "GDPbillions",
colorvar="GDPbillions", sizevar = "GDPbillions",
options=list(width=800, height=600,
title="GDP x Medal Count",
hAxis="{title:'Total Medal Count'}",
vAxis="{title:'GDP'}",
colorAxis="{legend:{position:'left'},colors:['black']}")))
plot(    gvisBubbleChart(plot1_2, idvar = "Country.Name", xvar = "Medals", yvar = "GDPbillions",
colorvar="GDPbillions", sizevar = "GDPbillions",
options=list(width=800, height=600,
title="GDP x Medal Count",
hAxis="{title:'Total Medal Count'}",
vAxis="{title:'GDP'}",
colorAxis="{legend:{position:'none'},colors:['black']}")))
runApp('Desktop/olympian')
View(plot1_3)
View(plot1_3)
View(area.df)
View(population.df)
View(gdpCapita.df)
View(mortalityRate.df)
runApp('Desktop/olympian')
View(gini.df)
shiny::runApp('Desktop/olympian')
runApp('Desktop/olympian')
runApp('Desktop/olympian')
